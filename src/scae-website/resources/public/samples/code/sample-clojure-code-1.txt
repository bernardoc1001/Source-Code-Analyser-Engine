(ns scae-library.core
  "This namespace is the main 'engine' or entry point of the library, it receives
  requests and calls the other namespaces to perform the analysis, then returns the
  result to the caller."
  (:require [scae-library.tokeniser :as tokeniser]
            [scae-library.abstract-syntax-tree :as ast]
            [scae-library.symbol-table :as st]
            [scae-library.style-analyser :as sa]
            [scae-library.node-ops :as node-ops] ;;todo review if I need this here
            [clojure.data.json :as json]))

;;todo make functions to just return ast or just return symbol table

#_(defn analyse-source-code
  "Expects a map with the following keys {:code     'string'
                                          :rulebook 'string'}"
  [request]
  (let [code-string (:code request)
        rulebook-map (json/read-str (:rulebook request) :key-fn keyword)
        abstract-syntax-tree
        (-> code-string
            (tokeniser/tokenise-code (:tokens rulebook-map))
            (ast/create-abstract-syntax-tree (:productions rulebook-map)))]
    (st/create-symbol-table abstract-syntax-tree)
    ;;(st/pretty-print-symbol-table) ;;todo remove this print

    ;;todo tidy up by making symbol table non-global
    (let [suggestions
          (sa/analyse-style abstract-syntax-tree (:style-rules rulebook-map))]
      (st/reset-symbol-table!)
      suggestions)))


(defn analyse-source-code
  "Expects a map with the following keys {:code     'string'
                                          :rulebook 'string'}"
  [request]
  (let [code-string (:code request)
        rulebook-map (json/read-str (:rulebook request) :key-fn keyword)

        ]
    (-> code-string
        (tokeniser/tokenise-code (:tokens rulebook-map))
        (ast/create-abstract-syntax-tree (:productions rulebook-map)))))
