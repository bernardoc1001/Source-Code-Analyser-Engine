{"tokens" : [
  {"skip":{
    "COMMENT": "(?:;(?:.)*)",
    "TAB" : "\t",
    "NEWLINE" : "\n",
    "CARRIAGE_RETURN" : "\r",
    "FORM_FEED" : "\f"
  }},


  {"token" : {
    "LPAR" : "\\(",
    "RPAR" : "\\)",
    "LSQU" : "\\[",
    "RSQU" : "\\]",
    "LCUR" : "\\{",
    "RCUR" : "\\}"}},

  {"token" : {
    "NUM" : "(?:(?:(?:(?:[0-9]))+(?:r(?:(?:[0-9]))+)?(?:n|l|L|N)?/(?:(?:[0-9]))+(?:r(?:(?:[0-9]))+)?(?:n|l|L|N)?)|(?:(?:[0-9]))+(?:r(?:(?:[0-9]))+)?(?:n|l|L|N)?|(?:(?:[0-9]))+\\.(?:(?:[0-9]))*(?:e(?:(?:[0-9]))+)?)",
    "NIL" : "nil",
    "STR" : "(?:\"(?s:.*?)\")",
    "BOOLEAN" : "(?:true|false)",
    "CHARACTER": "(?:\\ (?:~[\" \"]|(?:u(?:[0-9])(?:[0-9])(?:[0-9])(?:[0-9]))|(?:o(?:[0-9])(?:[0-9])(?:[0-9]))|newline|space|tab|my-scae-formfeed|backspace|return))",
    "KEYWORD": "(?::(?::)?(?:(?:(?:[0-9]))*(?:(?:(?:(?:[a-zA-Z])|(?:[\\*\\+!\\-_\\?=%&><$]))(?:(?:[0-9])|(?:[a-zA-Z])|(?:[\\*\\+!\\-_\\?=%&><$])|#|')*)(?:\\.(?:(?:(?:[a-zA-Z])|(?:[\\*\\+!\\-_\\?=%&><$]))(?:(?:[0-9])|(?:[a-zA-Z])|(?:[\\*\\+!\\-_\\?=%&><$])|#|')*))*)/)?(?:(?:[0-9]))*(?:(?:(?:[a-zA-Z])|(?:[\\*\\+!\\-_\\?=%&><$]))(?:(?:[0-9])|(?:[a-zA-Z])|(?:[\\*\\+!\\-_\\?=%&><$])|#|')*))"
  }},

  {"token": {
    "SYMBOL" : "(?:(?:(?:(?:[a-zA-Z])|(?:[\\*\\+!\\-_\\?=%&><$]))(?:(?:[0-9])|(?:[a-zA-Z])|(?:[\\*\\+!\\-_\\?=%&><$])|#|')*)|(?:(?:(?:(?:[a-zA-Z])|(?:[\\*\\+!\\-_\\?=%&><$]))(?:(?:[0-9])|(?:[a-zA-Z])|(?:[\\*\\+!\\-_\\?=%&><$])|#|')*)(?:\\.(?:(?:(?:[a-zA-Z])|(?:[\\*\\+!\\-_\\?=%&><$]))(?:(?:[0-9])|(?:[a-zA-Z])|(?:[\\*\\+!\\-_\\?=%&><$])|#|')*))*)|(?:(?:(?:(?:[a-zA-Z])|(?:[\\*\\+!\\-_\\?=%&><$]))(?:(?:[0-9])|(?:[a-zA-Z])|(?:[\\*\\+!\\-_\\?=%&><$])|#|')*)(?:\\.(?:(?:(?:[a-zA-Z])|(?:[\\*\\+!\\-_\\?=%&><$]))(?:(?:[0-9])|(?:[a-zA-Z])|(?:[\\*\\+!\\-_\\?=%&><$])|#|')*))*)/(?:(?:(?:[a-zA-Z])|(?:[\\*\\+!\\-_\\?=%&><$]))(?:(?:[0-9])|(?:[a-zA-Z])|(?:[\\*\\+!\\-_\\?=%&><$])|#|')*)|(?:(?:\\.|\\.-)(?:(?:(?:[a-zA-Z])|(?:[\\*\\+!\\-_\\?=%&><$]))(?:(?:[0-9])|(?:[a-zA-Z])|(?:[\\*\\+!\\-_\\?=%&><$])|#|')*)|\\.))"
  }},


  {"token":{
    "HASH": "#",
    "AT": "@",
    "APOS":"'",
    "TILDE": "\\~",
    "BACK-TICK": "`",
    "CARET": "\\^",
    "UNDERSCORE" : "_"

  }}

],
  "productions": {
    "scae-forward-declarations":"(declare scae-program my-scae-forms my-scae-form my-scae-list my-scae-vector my-scae-set my-scae-map my-scae-map-prime my-scae-symbol my-scae-literal my-scae-reader-macro my-scae-quote my-scae-lambda my-scae-regex my-scae-var-quote my-scae-discard my-scae-tag my-scae-meta my-scae-meta-prime)",
    "scae-program": "(defn scae-program [] [['(my-scae-forms)] ])",
    "scae-entry-point": "(scae-program)",
    
    "my-scae-forms": "(defn my-scae-forms [] [['(my-scae-form) '(my-scae-forms-prime)] [[]] ])",
    "my-scae-forms-prime":"(defn my-scae-forms-prime [] [['(my-scae-forms)] [[]] ])",
    "my-scae-form": "(defn my-scae-form [] [['(my-scae-list)] ['(my-scae-literal)] ['(my-scae-symbol)] ['(my-scae-vector)] ['(my-scae-set)] ['(my-scae-map)] ['(my-scae-reader-macro)] ])",
    "my-scae-list": "(defn my-scae-list [] [[:LPAR '(my-scae-forms) :RPAR] ])",
    "my-scae-vector": "(defn my-scae-vector [] [[:LSQU '(my-scae-forms) :RSQU] ])",
    "my-scae-set": "(defn my-scae-set [] [[:HASH :LCUR '(my-scae-forms) :RCUR] ])",
    "my-scae-map": "(defn my-scae-map [] [[:LCUR '(my-scae-map-prime) :RCUR] ])",
    "my-scae-map-prime": "(defn my-scae-map-prime [] [['(my-scae-form) '(my-scae-form) '(my-scae-map-prime)] []])",
    "my-scae-symbol": "(defn my-scae-symbol [] [[:SYMBOL] ])",
    "my-scae-literal":"(defn my-scae-literal [] [[:KEYWORD] [:CHARACTER] [:NUM] [:NIL] [:STR] [:BOOLEAN] ])",
    "my-scae-reader-macro": "(defn my-scae-reader-macro [] [['(my-scae-quote)] ['(my-scae-lambda)] ['(my-scae-regex)] ['(my-scae-var-quote)] ['(my-scae-discard)] ['(my-scae-tag)] ['(my-scae-meta)] ])",
    "my-scae-quote": "(defn my-scae-quote [] [[:APOS '(my-scae-form)] [:BACK-TICK '(my-scae-form)] [:TILDE '(my-scae-form)] [:TILDE :AT '(my-scae-form)] [:AT '(my-scae-form)] ])",
    "my-scae-lambda": "(defn my-scae-lambda [] [[:HASH :LPAR '(my-scae-forms) :RPAR] ])",
    "my-scae-regex": "(defn my-scae-regex [] [[:HASH :STR] ])",
    "my-scae-var-quote": "(defn my-scae-var-quote [] [[:HASH :APOS '(my-scae-symbol)] ])",
    "my-scae-discard": "(defn my-scae-discard [] [[:HASH :UNDERSCORE '(my-scae-form)] ])",
    "my-scae-tag":"(defn my-scae-tag [] [[:CARET '(my-scae-form) '(my-scae-form)]])",
    "my-scae-meta":"(defn my-scae-meta [] [[:HASH :CARET '(my-scae-meta-prime)]])",
    "my-scae-meta-prime" : "(defn my-scae-meta-prime [] [['(my-scae-map) '(my-scae-form)] ['(my-scae-form)] ])"

  },
  "style-rules": {
    "style-rules-function-definitions":{
      "require-only-in-repl": "(defn require-only-in-repl [ast-node] (let [token-value (:token-value (scae-library.node-ops/get-in-nested-entry ast-node [[0 \"my-scae-forms\"] [0 \"my-scae-form\"] [0 \"my-scae-symbol\"] [0 :SYMBOL]]))] (if (= token-value \"require\") \"Avoid the use of namespace-manipulating functions like require. It is unnecessary outside of a REPL environment. SCAE Bad-Style: (require\" \"\")))",

      "refer-only-in-repl": "(defn refer-only-in-repl [ast-node] (let [token-value (:token-value (scae-library.node-ops/get-in-nested-entry ast-node [[0 \"my-scae-forms\"] [0 \"my-scae-form\"] [0 \"my-scae-symbol\"] [0 :SYMBOL]]))] (if (= token-value \"refer\") \"Avoid the use of namespace-manipulating functions like refer. It is unnecessary outside of a REPL environment. SCAE Bad-Style: (refer\" \"\")))",

      "vec-instead-of-into" : "(defn vec-instead-of-into [ast-node] (let [symbol-token-value (:token-value (scae-library.node-ops/get-in-nested-entry ast-node [[0 \"my-scae-forms\"] [0 \"my-scae-form\"] [0 \"my-scae-symbol\"] [0 :SYMBOL]])) vector-node (scae-library.node-ops/get-in-nested-entry ast-node [[0 \"my-scae-forms\"] [0 \"my-scae-forms-prime\"] [0 \"my-scae-forms\"] [0 \"my-scae-form\"] [0 \"my-scae-vector\"]])] (if (and (= symbol-token-value \"into\") (empty? (-> vector-node (scae-library.node-ops/get-nth-named-child 0 \"my-scae-forms\") (scae-library.node-ops/get-parsed-node-result) (first)))) \"Prefer using vec over into when converting a sequence into a vector. E.g use (vec some-seq) instead of (into [] some-seq). SCAE Bad-Style: (into [] \" \"\")))",

      "dont-def-in-func" : "(defn dont-def-in-func [ast-node] (let [defn-symbol? (scae-library.node-ops/node-contains-nested-token? ast-node :SYMBOL \"defn\") func-name (:token-value (scae-library.node-ops/get-in-nested-entry ast-node [[0 \"my-scae-forms\"] [0 \"my-scae-forms-prime\"] [0 \"my-scae-forms\"] [0 \"my-scae-form\"] [0 \"my-scae-symbol\"] [0 :SYMBOL]])) def-symbol? (scae-library.node-ops/node-contains-nested-token? ast-node :SYMBOL \"def\")] (if (and defn-symbol? def-symbol?) (str \"Don't define variables inside of functions. SCAE Bad-Style: (defn \"func-name) \"\")))",

      "use-if-not" : "(defn use-if-not [ast-node] (let [if-symbol? (= \"if\" (:token-value (scae-library.node-ops/get-in-nested-entry ast-node [[0 \"my-scae-forms\"]  [0 \"my-scae-form\"] [0 \"my-scae-symbol\"] [0 :SYMBOL]])))        not-symbol? (= \"not\" (:token-value (scae-library.node-ops/get-in-nested-entry ast-node [[0 \"my-scae-forms\"] [0 \"my-scae-forms-prime\"] [0 \"my-scae-forms\"] [0 \"my-scae-form\"] [0 \"my-scae-list\"] [0 \"my-scae-forms\"] [0 \"my-scae-form\"] [0 \"my-scae-symbol\"] [0 :SYMBOL]])))] (if (and if-symbol? not-symbol?) (str \"Avoid using (if (not ...) ...). Use (if-not ...) instead. SCAE Bad-Style: (if (not\") \"\")))",

      "use-not=" : "(defn use-not= [ast-node] (let [not-symbol? (= \"not\" (:token-value (scae-library.node-ops/get-in-nested-entry ast-node [[0 \"my-scae-forms\"] [0 \"my-scae-form\"] [0 \"my-scae-symbol\"] [0 :SYMBOL]])))        equals-symbol? (= \"=\" (:token-value (scae-library.node-ops/get-in-nested-entry ast-node [[0 \"my-scae-forms\"] [0 \"my-scae-forms-prime\"] [0 \"my-scae-forms\"] [0 \"my-scae-form\"] [0 \"my-scae-list\"] [0 \"my-scae-forms\"] [0 \"my-scae-form\"] [0 \"my-scae-symbol\"] [0 :SYMBOL]])))] (if (and not-symbol? equals-symbol?) (str \"Avoid using (not (= ...) ...). Use (not= ...) instead. SCAE Bad-Style: (not (=\") \"\")))",

      "use-when-not" : "(defn use-when-not [ast-node] (let [when-symbol? (= \"when\" (:token-value (scae-library.node-ops/get-in-nested-entry ast-node [[0 \"my-scae-forms\"] [0 \"my-scae-form\"] [0 \"my-scae-symbol\"] [0 :SYMBOL]])))  not-symbol? (= \"not\" (:token-value (scae-library.node-ops/get-in-nested-entry ast-node [[0 \"my-scae-forms\"] [0 \"my-scae-forms-prime\"] [0 \"my-scae-forms\"] [0 \"my-scae-form\"] [0 \"my-scae-list\"] [0 \"my-scae-forms\"] [0 \"my-scae-form\"] [0 \"my-scae-symbol\"] [0 :SYMBOL]])))] (if (and when-symbol? not-symbol?) (str \"Avoid using (when (not ...) ...). Use (when-not ...) instead. SCAE Bad-Style: (when (not\") \"\")))"

    },
    "node-based-style-rules" : {
      "my-scae-list" : "[require-only-in-repl refer-only-in-repl vec-instead-of-into dont-def-in-func use-if-not use-not= use-when-not]"
    }
  }}